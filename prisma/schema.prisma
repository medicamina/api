// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String     @id @default(uuid())
  email String?  @unique
  phoneNumber String? @unique
  password String?
  resetToken String?
  twoFaToken String?
  firstName  String?
  middleName String?
  lastName  String?
  dob DateTime? // Date of Birth
  dod DateTime? // Date of Death
  birthCountry String?
  birthState String?
  birthCity String?
  gender Gender?
  height Float?
  weight Float?
  bloodType String?
  pictureUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  marriages Marriage[]
  children Children[]
  bookings Booking[]
  receieveMarketingEmails Boolean @default(true)

  doctorAccount Doctor?
  administratorAccount Administrator?

  @@unique([firstName, lastName, dob, birthCountry])
  @@index([email, phoneNumber])
}

enum Gender {
  MALE
  FEMALE
}

model Children {
  id    String     @id @default(uuid())
  children User[]
  year DateTime
  location String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Marriage {
  id    String     @id @default(uuid())
  users User[]
  year DateTime
  location String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Clinic {
  id String @id @unique @default(uuid())
  businessNumber String? @unique
  longitude Float?
  latitude Float?
  address String
  suburb String
  country String
  joinCode String? @unique @default(uuid())
  name String
  owner Administrator @relation("ClinicOwner", fields: [ownerId], references: [id])
  ownerId String
  doctors Doctor[]
  speciality Speciality
  bookings Booking[]
  hours BusinessHour[]
  administrators Administrator[]
  approved Boolean @default(false)
  approvedAt DateTime?
  // TODO: approvedBy
  pictureUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@unique([name, address, suburb, country])
  @@unique([businessNumber, country])
}

enum Speciality {
  EMERGENCY
  GENERAL_PRACTICE
  PSYCHOLOGY
  PSYCHIATRY
  PATHOLOGY
}

model Booking {
  id String @id @unique @default(uuid())
  time DateTime
  clinic Clinic @relation(fields: [clinicId], references: [id])
  clinicId String
  doctor Doctor @relation(fields: [doctorId], references: [id])
  doctorId String
  patient User @relation(fields: [patientId], references: [id])
  patientId String
  approved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Doctor {
  id String @id @unique @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String @unique
  speciality Speciality?
  clinics Clinic[]
  bookings Booking[]
  hours BusinessHour[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Administrator {
  id String @id @unique @default(uuid())
  user   User @relation(fields: [userId], references: [id])
  userId String  @unique
  clinics Clinic[]
  clinicOwner Clinic[] @relation("ClinicOwner")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
} 

model Staff {
  id String @id @unique @default(uuid())
}

model BusinessHour { // Availability
  id String @id @unique @default(uuid())
  day Day?
  doctor Doctor? @relation(fields: [doctorId], references: [id])
  doctorId String? @unique
  clinic Clinic? @relation(fields: [clinicId], references: [id])
  clinicId String? @unique
  startTime Int
  endTime Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@unique([doctorId, day, clinicId])
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

