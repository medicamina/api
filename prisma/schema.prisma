// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String?  @unique
  phoneNumber String? @unique
  password String?
  resetToken String?
  twoFaToken String?
  firstName  String?
  middleName String?
  lastName  String?
  dob DateTime? // Date of Birth
  dod DateTime? // Date of Death
  birthCountry String?
  birthState String?
  birthCity String?
  gender Gender?
  height Float?
  weight Float?
  bloodType String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  marriages Marriage[]
  children Children[]
  bookings Booking[]

  doctorAccount Doctor?
  administratorAccount Administrator?

  @@unique([firstName, lastName, dob, birthCountry])
  @@index([email, phoneNumber])
}

enum Gender {
  MALE
  FEMALE
}

model Children {
  id    Int     @id @default(autoincrement())
  children User[]
  year DateTime
  location String?
}

model Marriage {
  id    Int     @id @default(autoincrement())
  users User[]
  year DateTime
  location String?
}

model Clinic {
  id Int @id @unique @default(autoincrement())
  longitude Float?
  latitude Float?
  address String?
  name String?
  doctors Doctor[]
  speciality Speciality?
  bookings Booking[]
  hours BusinessHour[]
  administrators Administrator[]
}

enum Speciality {
  EMERGENCY
  GENERAL_PRACTICE
  PSYCHOLOGY
  PSYCHIATRY
  PATHOLOGY
}

model Booking {
  id Int @id @unique @default(autoincrement())
  time DateTime
  clinic Clinic @relation(fields: [clinicId], references: [id])
  clinicId Int
  doctor Doctor @relation(fields: [doctorId], references: [id])
  doctorId Int
  patient User @relation(fields: [patientId], references: [id])
  patientId Int
  approved Boolean @default(false)
}

model Doctor {
  id Int @id @unique @default(autoincrement())
  clinics Clinic[]
  user User @relation(fields: [userId], references: [id])
  userId Int @unique
  speciality Speciality?
  bookings Booking[]
  hours BusinessHour[]
}

model Administrator {
  id Int @id @unique @default(autoincrement())
  clinic Clinic @relation(fields: [clinicId], references: [id])
  clinicId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
} 

model BusinessHour { // Availability
  id Int @id @unique @default(autoincrement())
  day Day?
  doctor Doctor? @relation(fields: [doctorId], references: [id])
  doctorId Int? @unique
  clinic Clinic? @relation(fields: [clinicId], references: [id])
  clinicId Int? @unique
  startTime Int
  endTime Int

  @@unique([doctorId, day, clinicId])
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

